#include <gtest/gtest.h>#include <Unet/Ipv4Address.hpp>TEST ( Ipv4Address , DoesntThrowWhileConstruction ){    ASSERT_NO_THROW(Unet::Ipv4Address());}TEST ( DefaultInitializedIpv4AddressSize , EqualsZero ){    Unet::Ipv4Address address;    socklen_t addressSize = address.getSizeRef();    bool addressSizeEqualsZero = addressSize == 0;    ASSERT_TRUE(addressSizeEqualsZero);}TEST ( DefaultInitializedIpv4Address , IsEmpty ){    Unet::Ipv4Address address;    bool addressIsEmpty = address.isEmpty();    ASSERT_TRUE(addressIsEmpty);}TEST ( DefaultInitializedIpv4Address , EqualsToAnotherDefaultInitializedAddress ){    Unet::Ipv4Address addressFoo;    Unet::Ipv4Address addressBar;    bool addressFooEqualsAddressBar = addressFoo == addressBar;    ASSERT_TRUE(addressFooEqualsAddressBar);}TEST ( DefaultInitializedIpv4Address , EqualsToAnotherDefaultInitializedAddress1 ){    Unet::Ipv4Address addressFoo("123123123","123123123");}int main ( int argc , char** argv ){    ::testing::InitGoogleTest(&argc, argv);    return RUN_ALL_TESTS();}
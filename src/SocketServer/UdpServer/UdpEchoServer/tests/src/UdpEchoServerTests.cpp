#include <gtest/gtest.h>#include <Unet/Ipv4Address.hpp>#include <Unet/UdpEchoServer.hpp>/*TEST ( UdpServer , DoesNotThrowWhileDefaultConstruction ){    ASSERT_NO_THROW(Unet::UdpServer());}TEST ( UdpServer , DoesNotThrowWhileSettingAddress ){	Unet::UdpServer udpServer;	Unet::AddressShrPtr udpServerAddressShrPtr(new Unet::Ipv4Address("127.0.0.1",50000));    ASSERT_NO_THROW(udpServer.setAddress(udpServerAddressShrPtr));}TEST ( UdpServer , DoesNotThrowWhileLaunching ){	Unet::UdpServer udpServer;	Unet::AddressShrPtr udpServerAddressShrPtr(new Unet::Ipv4Address("127.0.0.1",50000));	udpServer.setAddress(udpServerAddressShrPtr);	ASSERT_NO_THROW(udpServer.launch());}TEST ( UdpServer , DoesNotThrowWhileStopping ){	Unet::UdpServer udpServer;	Unet::AddressShrPtr udpServerAddressShrPtr(new Unet::Ipv4Address("127.0.0.1",50000));	udpServer.setAddress(udpServerAddressShrPtr);	udpServer.launch();	ASSERT_NO_THROW(udpServer.stop());}TEST ( UdpServer , DoesNotThrowWhileGettingLaunchedState ){	Unet::UdpServer udpServer;    ASSERT_NO_THROW(udpServer.getLaunched());}TEST ( DefaultConstructedUdpServer , ReturnsFalseLaunchedState ){	Unet::UdpServer udpServer;    ASSERT_FALSE(udpServer.getLaunched());}*/int main ( int argc , char** argv ){    ::testing::InitGoogleTest(&argc, argv);    return RUN_ALL_TESTS();}